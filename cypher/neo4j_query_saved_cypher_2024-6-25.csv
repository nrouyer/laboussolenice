name,description,query,id,parentId,isFolder
La Boussole Nice,,,0,,true
üò± D√©couverte des donn√©es,,"LOAD CSV WITH HEADERS FROM ""file:///accidents-corporels-de-la-circulation-millesime.tsv"" AS row FIELDTERMINATOR ""\t""
RETURN row LIMIT 10",1,0,false
‚ùóContraintes,,"CREATE CONSTRAINT IF NOT EXISTS FOR (a:Accident) REQUIRE (a.accidentId) IS NODE KEY;
CREATE CONSTRAINT IF NOT EXISTS FOR (m:Manoeuvre) REQUIRE (m.manoeuvreId) IS NODE KEY;
CREATE CONSTRAINT IF NOT EXISTS FOR (motif:Motif) REQUIRE (motif.motifId) IS NODE KEY;
CREATE CONSTRAINT IF NOT EXISTS FOR (u:Usager) REQUIRE (u.usagerId) IS NODE KEY;",2,0,false
üêé Chargement Accidents,,"LOAD CSV WITH HEADERS FROM ""file:///accidents-corporels-de-la-circulation-millesime.xlsx.tsv"" AS row FIELDTERMINATOR ""\t""
CALL {
  WITH row
  WITH row, [k in keys(row) | [apoc.text.camelCase(k), row[k]]] AS newPropPairs
  WITH row, apoc.map.fromPairs(newPropPairs) AS mapProps
  MERGE (a:Accident {accidentId: row.`Identifiant de l'accident`})
    ON CREATE SET a += mapProps
    ON MATCH SET a += mapProps
} IN TRANSACTIONS OF 100 rows",3,0,false
üêé Chargement Manoeuvres,,"MATCH (a:Accident)
UNWIND split(a.man≈ìuvre, "","") AS manoeuvre
WITH manoeuvre
WITH distinct trim(manoeuvre) AS manoeuvre
MERGE (m:Manoeuvre {manoeuvreId: manoeuvre})",4,0,false
üêé Chargement Motifs,,"MATCH (n:Accident) 
UNWIND split(n.motifTrajet, "","") AS motif
WITH trim(motif) AS motif
WITH DISTINCT motif
MERGE (m:Motif {motifId: motif})",5,0,false
üìçCr√©ation geoPoints,,"MATCH (a:Accident)
WHERE a.coordonn√©es is not null
CALL {
  WITH a
  WITH a, toFloat(trim(split(a.coordonn√©es, "","")[0])) AS latitude, toFloat(trim(split(a.coordonn√©es, "","")[1])) AS longitude
  WITH a, point({latitude: latitude, longitude: longitude}) AS geoPoint
  SET a.geoPoint = geoPoint
} IN TRANSACTIONS OF 100 rows;",6,0,false
üìçIndex geoPoint,,CREATE POINT INDEX accident_geopoint_index FOR (a:Accident) ON (a.geoPoint);,7,0,false
üïú Format date et heure,,"MATCH (a:Accident) 
SET a.dateHeure = datetime(a.dateEtHeure);",8,0,false
üïú Index dateHeure,,CREATE INDEX IF NOT EXISTS FOR (a:Accident) ON (a.dateHeure);,9,0,false
üêé Chargement Usagers,,"MATCH (a:Accident)
CALL {
  WITH a
  WITH a, split(a.cat√©gorieDUsager, "","") AS listeUsagers, split(a.ann√©eDeNaissance, "","") AS listeAnneeNaissance, split(a.gravit√©, "","") AS listeGravite, split(a.sexe, "","") AS listeSexe
  WITH a, listeUsagers, listeAnneeNaissance, listeGravite, listeSexe, size(listeUsagers) AS nbUsagers
  FOREACH (i IN range(0, nbUsagers - 1) | 
    MERGE (u:Usager {usagerId: a.accidentId + '_' + i})
      ON CREATE SET u.cat√©gorieDUsager = listeUsagers[i], u.ann√©eDeNaissance = listeAnneeNaissance[i], u.gravit√© = listeGravite[i], u.sexe = listeSexe[i]
      ON MATCH SET u.cat√©gorieDUsager = listeUsagers[i], u.ann√©eDeNaissance = listeAnneeNaissance[i], u.gravit√© = listeGravite[i], u.sexe = listeSexe[i]
    MERGE (a)-[:IMPLIQUE]->(u)   
  )
} IN TRANSACTIONS OF 50 rows",10,0,false
üö∂Indexes Usager,,"CREATE INDEX IF NOT EXISTS FOR (u:Usager) ON (u.cat√©gorieDUsager);
CREATE INDEX IF NOT EXISTS FOR (u:Usager) ON (u.ann√©eDeNaissance);
CREATE INDEX IF NOT EXISTS FOR (u:Usager) ON (u.gravit√©);
CREATE INDEX IF NOT EXISTS FOR (u:Usager) ON (u.sexe);",11,0,false